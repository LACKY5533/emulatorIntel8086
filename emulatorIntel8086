#include <iostream>
#include <fstream>
#include <string>
#include <vector>
#include "math.h"
#include <stack>
#include "unistd.h"
#include <sstream>


using namespace std;

// класс стек
class Stack {
    const int MAX = 16;
    string* stack = new string [MAX];
    int top = -1;
    int size = 0;
    // IsEmpty
    // если пустой то true
    bool IsEmpty() {
        if (this->top != 0) {
            return 0;
        }
        else {
            return 1;
        }
    }
    // IsFull
    // если полный то true
    bool IsFull() {
        if (this->top == this->MAX) {
            return 1;
        }
        else {
            return 0;
        }
    };

    // PUSH
public :
    void push(string newElement) {
        if (this->IsFull() == true) {
            cout << ("Стек заполнен") << endl;
        }
        else {
            this->top++;
            this->stack[this->top] = newElement;
        }
        this->size++;
    };

    // POP
    string pop() {
        if (this->IsEmpty() == true) {
            cout << ("Стек пустой") << endl;
            return "0";
        }
        else {
            string temp = this->stack[this->top];
            this->top--;
            return temp;
        }
        this->size--;
    };

    // PEEK
    void peek() {
        cout << "Стек:" << endl;
        for (int i = 0; i < size; i++) {
            cout << this->stack[i] << endl;
        }
    };
};


// класс регистров
class Register {

public :
    // AL
    string lR = "00000000";
    string* lowReg = &lR;

    // AH
    string hR = "00000000";
    string* highReg = &lR;

    // AX
    string xR = lR + hR;
    string * xReg = &xR;

    // если меняется xReg, то true
    bool X = false;

};

//intel8086, 16bit
class RMA8086 {
    // регистры
public:
    Register AX;
    Register BX;
    Register CX;
    Register DX;
    Stack stack;

    // если двоичное, то false, иначе true
    bool d = false;



    // PUSH – занести в стек
    // 9
    void push (string* newElement) {
        this->stack.push(*newElement);
    };

    // POP – вытащить из стека
    // 10
    void pop (string *reg) {
        *reg = this->stack.pop();
    };



    string* checkreg(string xReg) {
        string *p = &xReg;
        this-> d = false;
        if (xReg == "AX") {
            this->AX.X = true;
            string temp = *(this->AX.highReg) + *(this->AX.lowReg);
            *(this->AX.xReg) = temp;
            return this->AX.xReg;
        } else
            if (xReg == "BX") {
                this->BX.X = true;
                string temp = *(this->BX.highReg) + *(this->BX.lowReg);
                *(this->BX.xReg) = temp;
                return this->BX.xReg;
            } else
                if (xReg == "CX") {
                    this->CX.X = true;
                    string temp = *(this->CX.highReg) + *(this->CX.lowReg);
                    *(this->CX.xReg) = temp;
                    return this->CX.xReg;
                } else
                    if (xReg == "DX") {
                        this->DX.X = true;
                        string temp = *(this->DX.highReg) + *(this->DX.lowReg);
                        *(this->DX.xReg) = temp;
                        return this->DX.xReg;
                    } else
                        if (xReg == "AL"){
                            return this->AX.lowReg;
                        } else
                            if (xReg == "BL"){
                                return this->BX.lowReg;
                            } else
                                if (xReg == "CL"){
                                    return this->CX.lowReg;
                                } else
                                    if (xReg == "DL"){
                                        return this->DX.lowReg;
                                    } else
                                        if (xReg == "AH"){
                                            return this->AX.highReg;
                                        } else
                                            if (xReg == "BH"){
                                                return this->BX.highReg;
                                            } else
                                                if (xReg == "CH"){
                                                    return this->CX.highReg;
                                                } else
                                                    if (xReg == "DH"){
                                                        return this->DX.highReg;
                                                    } else {
                                                        this-> d = true;
                                                        return p;
                                                    }
    }


    // перевод 10->2
    string fromDecToBin(unsigned int decNum) {
        string binNum;
        while (decNum > 0) {
            int r = decNum % 2;
            binNum += to_string(r);
            decNum /= 2;
        }

        reverse(binNum.begin(), binNum.end());
        return binNum;
    }

    // перевод 2->10
    string fromBinToDec(string binNum) {
        int decNum = 0;
        for (int i = binNum.length() - 1; i >= 0; i--) {
            if (binNum[binNum.length() - i - 1] == '1') {
                decNum += pow(2.0, 1.0 * i);
            }
        }
        return to_string(decNum);
    }

    // разделение
    void split (Register AX) {
        if (this->AX.X == true) {
            string temp = "";
            string temp1 = *(AX.xReg);
            for (int i = 0; i < 8; i++) {
                temp += temp1[i];
            }
            *(AX.highReg) = temp;

            temp = "";
            for (int i = 8; i < 16; i++) {
                temp += temp1[i];
            }
            *(AX.lowReg) = temp;
        }
        this->AX.X = false;
    }

    // добавление нулей
    void addNULL (string* reg) {
        int length = reg->length();
        string temp = *reg;
        *reg = "";
        if (length != 8 and stoi(fromBinToDec(temp)) <= 255) {
            int n  = 8 - length;
            for (int i = 0; i < n; i ++) {
                *reg += "0";
            }
            *reg += temp;
        }
        else {
            if (length != 16 and stoi(fromBinToDec(temp)) > 255) {
                int n  = 16 - length;
                for (int i = 0; i < n; i ++) {
                    *reg += "0";
                }
                *reg += temp;
            } else *reg = temp;
        }
    };

    // mov
    void mov(string* reg, string* num) {
        string*  N = num;
        if (this-> d == true) *N = fromDecToBin(stoi(*num));
        addNULL(N);
        *reg = *N;
        }

    // add
    void add(string* reg, string* num) {
        string R = fromBinToDec(*reg);
        string N = *num;
        if (this-> d == false)  N = fromBinToDec(*num);
        int sum = stoi(R) + stoi(N);
        if (sum < 65535){
            *reg = fromDecToBin(sum);
            addNULL(reg);
        } else {
            string temp = fromDecToBin(sum);
            string temp1 = "";
            for (int i = 0; i < 16; i++) {
                temp1[i] = temp[i];
            }
            *reg = temp1;
        }
    }

    // sub
    void sub (string* reg, string* num) {
        string R = fromBinToDec(*reg);
        string N = *num;
        if (this-> d == false) N = fromBinToDec(*num);
        int sub = stoi(R) - stoi(N);
        *reg = fromDecToBin(sub);
    }

    // inc
    void inc (string *reg) {
        int decr = stoi(fromBinToDec(*reg)) + 1;
        *reg = fromDecToBin(decr);
    }

    // NOT
    void NOT (string *reg) {

        // двоичное число
        string temp = *reg;
        int n = temp.length();

        // инверсия
        for (int i = 0; i < n; i++) {
            if (temp[i] == '1') {
                temp[i] = '0';
            }
            else {
                temp[i] = '1';
            };
        };
        *reg = temp;
    };

    // OR
    void OR (string *reg1, string *reg2) {
        // двоичное число
        string *temp;

        // ИЛИ
        for (int i = 0; i < temp->length(); i++) {
            *(temp +i) = to_string(stoi(*(reg1+i)) + stoi(*(reg2+i)));
        };
        reg1 = temp;
    };

    // AND
    void AND (string *reg1, string *reg2) {
        // двоичное число
        string temp = "";
        string r1 = *reg1;
        string r2 = *reg2;

        // И
        for (int i = 0; i < reg1->length(); i++) {
            //int andd = stoi(r1[i]) * stoi(r2[i]);
            string str = to_string((r1[i] - '0') * (r2[i]-'0'));
            temp += str[0] ;
        };
        *reg1 = temp;
    };

vector<std::string> split(string stringToBeSplitted, char delimeter)
{
    std::vector<std::string> splittedString;
    int startIndex = 0;
    int  endIndex = 0;
    while( (endIndex = stringToBeSplitted.find(delimeter, startIndex)) < stringToBeSplitted.size() )
    {
        std::string val = stringToBeSplitted.substr(startIndex, endIndex - startIndex);
        splittedString.push_back(val);
        startIndex = endIndex + 1;
    }
    if(startIndex < stringToBeSplitted.size())
    {
        std::string val = stringToBeSplitted.substr(startIndex);
        splittedString.push_back(val);
    }

    return splittedString;
}

string showReg(string *reg) {
    string temp = *reg;
    return temp;
}

void checkReg(RMA8086 emu) {
    emu.split(emu.AX);
    emu.split(emu.BX);
    emu.split(emu.CX);
    emu.split(emu.DX);
}

int main() {
    string path;
    string str;
    vector <string> arr;
    vector <string> elems;
    path = «путь до файла";
    ifstream f(path);

    while (f) {
        getline(f,str);
        arr.push_back(str);
    }

    f.close();
    int n = arr.size() - 1;
    for (int i = 0; i < n; i++) {
        cout << arr.at(i) << endl;
    }
    //int n = arr.size();
    int m = 6;
    RMA8086 emu = RMA8086();
    cout << "****************************" << endl;

    for (int i = 0; i < n; i++) {
        arr.at(i).erase(std::remove(arr.at(i).begin(), arr.at(i).end(), ','), arr.at(i).end());
        std::vector<std::string> spl = split(arr.at(i), ' ');

        if (spl.at(0) == "PUSH") {
            emu.push(emu.checkreg(spl.at(1)));
        }
        else if (spl[0] == "POP") {
            emu.push(emu.checkreg(spl.at(1)));
            checkReg(emu);
        }
        else if (spl[0] == "MOV") {
            emu.mov(emu.checkreg(spl.at(1)), emu.checkreg(spl.at(2)));
            checkReg(emu);
        }
        else if (spl[0] == "ADD") {
            emu.add(emu.checkreg(spl.at(1)), emu.checkreg(spl.at(2)));
            checkReg(emu);
        }
        else if (spl[0] == "SUB") {
            emu.sub(emu.checkreg(spl.at(1)), emu.checkreg(spl.at(2)));
            checkReg(emu);
        }
        else if (spl[0] == "DEC") {
            emu.dec(emu.checkreg(spl.at(1)));
            checkReg(emu);
        }
        else if (spl[0] == "INC") {
            emu.inc(emu.checkreg(spl.at(1)));
            checkReg(emu);
        }
        else if (spl[0] == "XCHG") {
            emu.xchg(emu.checkreg(spl.at(1)), emu.checkreg(spl.at(2)));
            checkReg(emu);
        }
        else if (spl[0] == "NOT") {
            emu.NOT(emu.checkreg(spl.at(1)));
            checkReg(emu);
        }
        else if (spl[0] == "OR") {
            emu.OR(emu.checkreg(spl.at(1)), emu.checkreg(spl.at(2)));
            checkReg(emu);
        }
        else if (spl[0] == "AND") {
            emu.AND(emu.checkreg(spl.at(1)), emu.checkreg(spl.at(2)));
            checkReg(emu);
        }
        else if (spl[0] == "NOP") {
            emu.NOP();
        }
    }
    cout << "AH: " << showReg(emu.AX.highReg) << endl;
    cout << "AL: " << showReg(emu.AX.lowReg) << endl;

    cout << "BH: " << showReg(emu.BX.highReg) << endl;
    cout << "BL: " << showReg(emu.BX.lowReg) << endl;

    cout << "CH: " << showReg(emu.CX.highReg) << endl;
    cout << "CL: " << showReg(emu.CX.lowReg) << endl;

    cout << "DH: " << showReg(emu.DX.highReg) << endl;
    cout << "DL: " << showReg(emu.DX.lowReg) << endl;

    return 0;
}
